{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst client_id = \"e46d40a2647a8388c2f5\";\nconst client_secret = \"79b90a1877131c334f913d5665f308cdab863304\";\nexport const fetchReposAction = createAsyncThunk(\"repos/list\", async (user, {\n  rejectWithValue,\n  getState,\n  dispatch\n}) => {\n  try {\n    const {\n      data\n    } = await axios.get(`https://api.github.com/users/${user}/repos?${client_id}&client_secret=${client_secret}`);\n    return data;\n  } catch (error) {\n    return error;\n  }\n});\nexport const fetchProfileAction = createAsyncThunk(\"profile/list\", async (user, {\n  rejectWithValue,\n  getState,\n  dispatch\n}) => {\n  try {\n    const {\n      data\n    } = await axios.get(`https://api.github.com/users/${user}?client_id=${client_id}&client_secret=${client_secret}`);\n    return data;\n  } catch (error) {\n    return error;\n  }\n});\nconst reposSlices = createSlice({\n  name: \"repos\",\n  initialState: {},\n  extraReducers: builder => {\n    builder.addCase(fetchReposAction.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchReposAction.fulfilled, (state, action) => {\n      state.reposList = action === null || action === void 0 ? void 0 : action.payload;\n      state.loading = false;\n    });\n    builder.addCase(fetchReposAction.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n    builder.addCase(fetchProfileAction.pending, (state, action) => {\n      state.profileLoading = true;\n    });\n    builder.addCase(fetchProfileAction.fulfilled, (state, action) => {\n      console.log(action);\n      state.profile = action === null || action === void 0 ? void 0 : action.payload;\n      state.profileLoading = false;\n    });\n    builder.addCase(fetchProfileAction.rejected, (state, action) => {\n      state.profileLoading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport default reposSlices.reducer;","map":{"version":3,"sources":["/Users/inovotek/programming/youtube/guide/githubfinder/src/redux/slices/reposSlice.js"],"names":["createAsyncThunk","createSlice","axios","client_id","client_secret","fetchReposAction","user","rejectWithValue","getState","dispatch","data","get","error","fetchProfileAction","reposSlices","name","initialState","extraReducers","builder","addCase","pending","state","action","loading","fulfilled","reposList","payload","rejected","profileLoading","console","log","profile","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst client_id = \"e46d40a2647a8388c2f5\";\nconst client_secret = \"79b90a1877131c334f913d5665f308cdab863304\";\n\nexport const fetchReposAction = createAsyncThunk(\n  \"repos/list\",\n  async (user, { rejectWithValue, getState, dispatch }) => {\n    try {\n      const { data } = await axios.get(\n        `https://api.github.com/users/${user}/repos?${client_id}&client_secret=${client_secret}`\n      );\n\n      return data;\n    } catch (error) {\n      return error;\n    }\n  }\n);\n\nexport const fetchProfileAction = createAsyncThunk(\n  \"profile/list\",\n  async (user, { rejectWithValue, getState, dispatch }) => {\n    try {\n      const { data } = await axios.get(\n        `https://api.github.com/users/${user}?client_id=${client_id}&client_secret=${client_secret}`\n      );\n\n      return data;\n    } catch (error) {\n      return error;\n    }\n  }\n);\n\nconst reposSlices = createSlice({\n  name: \"repos\",\n  initialState: {},\n  extraReducers: builder => {\n    builder.addCase(fetchReposAction.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchReposAction.fulfilled, (state, action) => {\n      state.reposList = action?.payload;\n      state.loading = false;\n    });\n    builder.addCase(fetchReposAction.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n    builder.addCase(fetchProfileAction.pending, (state, action) => {\n      state.profileLoading = true;\n    });\n    builder.addCase(fetchProfileAction.fulfilled, (state, action) => {\n      console.log(action);\n      state.profile = action?.payload;\n      state.profileLoading = false;\n    });\n    builder.addCase(fetchProfileAction.rejected, (state, action) => {\n      state.profileLoading = false;\n      state.error = action.payload;\n    });\n  },\n});\n\nexport default reposSlices.reducer;\n"]},"metadata":{},"sourceType":"module"}